// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package registry

import (
	"fmt"
	"strings"
)

const (
	// NameMAL is a Name of type MA-L.
	NameMAL Name = "MA-L"
	// NameMAM is a Name of type MA-M.
	NameMAM Name = "MA-M"
	// NameMAS is a Name of type MA-S.
	NameMAS Name = "MA-S"
	// NameCID is a Name of type CID.
	NameCID Name = "CID"
)

var ErrInvalidName = fmt.Errorf("not a valid Name, try [%s]", strings.Join(_NameNames, ", "))

var _NameNames = []string{
	string(NameMAL),
	string(NameMAM),
	string(NameMAS),
	string(NameCID),
}

// NameNames returns a list of possible string values of Name.
func NameNames() []string {
	tmp := make([]string, len(_NameNames))
	copy(tmp, _NameNames)
	return tmp
}

// NameValues returns a list of the values for Name
func NameValues() []Name {
	return []Name{
		NameMAL,
		NameMAM,
		NameMAS,
		NameCID,
	}
}

// String implements the Stringer interface.
func (x Name) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Name) IsValid() bool {
	_, err := ParseName(string(x))
	return err == nil
}

var _NameValue = map[string]Name{
	"MA-L": NameMAL,
	"MA-M": NameMAM,
	"MA-S": NameMAS,
	"CID":  NameCID,
}

// ParseName attempts to convert a string to a Name.
func ParseName(name string) (Name, error) {
	if x, ok := _NameValue[name]; ok {
		return x, nil
	}
	return Name(""), fmt.Errorf("%s is %w", name, ErrInvalidName)
}
